# Requires disruptor-3.0.0.jar or higher on the classpath. Future versions of Log4j 2 will require disruptor-3.3.3.jar or higher.
# This is simplest to configure and gives the best performance.
# To make all loggers asynchronous, add the disruptor jar to the classpath
# and set the system property Log4jContextSelector to org.apache.logging.log4j.core.async.AsyncLoggerContextSelector.
# By default, location is not passed to the I/O thread by asynchronous loggers.
# If one of your layouts or custom filters needs location information,
# you need to set "includeLocation=true" in the configuration of all relevant loggers, including the root logger.

# Creates the LoggerContexts. An application can have one or more active LoggerContexts depending on the circumstances.
# See Log Separation for more details. Available context selector implementation classes:
# org.apache.logging.log4j.core.async.AsyncLoggerContextSelector - makes all loggers asynchronous.
# org.apache.logging.log4j.core.selector.BasicContextSelector - creates a single shared LoggerContext.
# org.apache.logging.log4j.core.selector.ClassLoaderContextSelector - separate LoggerContexts for each web application.
# org.apache.logging.log4j.core.selector.JndiContextSelector - use JNDI to locate each web application's LoggerContext.
# org.apache.logging.log4j.core.osgi .BundleContextSelector - separate LoggerContexts for each OSGi bundle.
Log4jContextSelector=org.apache.logging.log4j.core.async.AsyncLoggerContextSelector

# Fully qualified name of a class that implements the
# com.lmax.disruptor.ExceptionHandler interface. 
# The class needs to have a public zero-argument constructor. 
# If specified, this class will be notified when an exception occurs while logging the messages.
# If not specified, the default exception handler will print a message
# and stack trace to the standard error output stream.
AsyncLogger.ExceptionHandler=defaullt handler

# Size (number of slots) in the RingBuffer used by the asynchronous logging subsystem.
# Make this value large enough to deal with bursts of activity.
# The minimum size is 128. The RingBuffer will be pre-allocated at first use
# and will never grow or shrink during the life of the system
AsyncLogger.RingBufferSize=256*1024

# Valid values: Block, Timeout, Sleep, Yield. 
# Block is a strategy that uses a lock and condition variable for the I/O thread waiting for log events.
# Block can be used when throughput and low-latency are not as important as CPU resource.
# Recommended for resource constrained/virtualised environments. 
# Timeout is a variation of the Block strategy that will periodically wake up
# from the lock condition await() call.
# This ensures that if a notification is missed somehow the consumer thread is
# not stuck but will recover with a small latency delay (default 10ms). 
# Sleep is a strategy that initially spins, then uses a Thread.yield(),
# and eventually parks for the minimum number of nanos the OS and JVM will
# allow while the I/O thread is waiting for log events. Sleep is a good compromise
# between performance and CPU resource. This strategy has very low impact
# on the application thread, in exchange for some additional latency for actually getting the message logged. 
# Yield is a strategy that uses a Thread.yield() for waiting for log events after an initially spinning.
# Yield is a good compromise between performance and CPU resource, 
#but may use more CPU than Sleep in order to get the message logged to disk sooner.
AsyncLogger.WaitStrategy=Timeout

# Valid values: CACHED, UNCACHED. 
# By default, AsyncLogger caches the thread name in a ThreadLocal variable to improve performance.
# Specify the UNCACHED option if your application modifies the thread name at runtime
# (with Thread.currentThread().setName()) and you want to see the new thread name reflected in the log.
AsyncLogger.ThreadNameStrategy=UNCACHED

# Implementation of the org.apache.logging.log4j.core.util.Clock interface
# that is used for timestamping the log events when all loggers are asynchronous. 
# By default, System.currentTimeMillis is called on every log event.
# CachedClock is an optimization intended for low-latency applications
# where time stamps are generated from a clock that updates its internal time
# in a background thread once every millisecond, or every 1024 log events,
# whichever comes first. This reduces logging latency a little,
# at the cost of some precision in the logged time stamps.
# Unless you are logging many events, you may see "jumps" of 10-16 milliseconds
# between log time stamps. WEB APPLICATION WARNING: The use of a background thread may cause
# issues for web applications and OSGi applications so CachedClock is not recommended for this kind of applications.
# You can also specify the fully qualified class name of a custom class that implements the Clock interface.
log4j.Clock=SystemClock